/* eslint-disable consistent-return */
const chalk = require('chalk');
const <%= generators[subGenerator].name %> = require('<%= generators[subGenerator].path %>');
<% if(subGenerator === 'client') {%> const writeFiles = require('./files').writeFiles; <% } %>

module.exports = class extends <%= generators[subGenerator].name %> {
    constructor(args, opts) {
        super(args, { fromBlueprint: true, ...opts }); // fromBlueprint variable is important

        <% if (subGenerator.startsWith('entity-')) { %>
        if (!this.jhipsterContext) {
            this.error(`This is a JHipster blueprint and should be used only like ${chalk.yellow('jhipster --blueprints <%= moduleName %>')}`);
        }
        <% } else { %>
        const jhContext = (this.jhipsterContext = this.options.jhipsterContext);

        if (!jhContext) {
            this.error(
                `This is a JHipster blueprint and should be used only like ${chalk.yellow('jhipster --blueprints <%= moduleName %>')}`
            );
        }
        <% } %>
    }

    get initializing() {
        /**
         * Any method beginning with _ can be reused from the superclass `<%= generators[subGenerator].name %>`
         *
         * There are multiple ways to customize a phase from JHipster.
         *
         * 1. Let JHipster handle a phase, blueprint doesnt override anything.
         * ```
         *      return super._initializing();
         * ```
         *
         * 2. Override the entire phase, this is when the blueprint takes control of a phase
         * ```
         *      return {
         *          myCustomInitPhaseStep() {
         *              // Do all your stuff here
         *          },
         *          myAnotherCustomInitPhaseStep(){
         *              // Do all your stuff here
         *          }
         *      };
         * ```
         *
         * 3. Partially override a phase, this is when the blueprint gets the phase from JHipster and customizes it.
         * ```
         *      const phaseFromJHipster = super._initializing();
         *      const myCustomPhaseSteps = {
         *          displayLogo() {
         *              // override the displayLogo method from the _initializing phase of JHipster
         *          },
         *          myCustomInitPhaseStep() {
         *              // Do all your stuff here
         *          },
         *      }
         *      return { ...phaseFromJHipster, ...myCustomPhaseSteps };
         * ```
         */
        // Here we are not overriding this phase and hence its being handled by JHipster
        return super._initializing();
    }

    get prompting() {
        <% if(subGenerator === 'client') {%>
        // The prompting phase is being overriden so that we can ask our own questions
        // return {
        //     askForClient: prompts.askForClient,
        //     askForClientSideOpts: prompts.askForClientSideOpts,

        //     setSharedConfigOptions() {
        //         this.configOptions.lastQuestion = this.currentQuestion;
        //         this.configOptions.totalQuestions = this.totalQuestions;
        //         this.configOptions.clientFramework = this.clientFramework;
        //         this.configOptions.useSass = this.useSass;
        //     }
        // };
        // If the prompts need to be overriden then use the code commented out above instead
        <% } %>
        // Here we are not overriding this phase and hence its being handled by JHipster
        return super._prompting();
    }

    get configuring() {
        // Here we are not overriding this phase and hence its being handled by JHipster
        return super._configuring();
    }

    get composing() {
        // Here we are not overriding this phase and hence its being handled by JHipster
        return super._composing();
    }

    get loading() {
      // Here we are not overriding this phase and hence its being handled by JHipster
      return super._loading();
    }

    get preparing() {
      // Here we are not overriding this phase and hence its being handled by JHipster
      return super._preparing();
    }

<%_ if (subGenerator === 'entity') { _%>
    get preparingRelationships() {
      // Here we are not overriding this phase and hence its being handled by JHipster
      return super._preparingRelationships();
    }
<%_ } _%>

    get default() {
        // Here we are not overriding this phase and hence its being handled by JHipster
        return super._default();
    }

    get writing() {
        <% if (subGenerator === 'client') {%>
        // The writing phase is being overriden so that we can write our own templates as well.
        // If the templates doesnt need to be overrriden then just return `super._writing()` here
        const phaseFromJHipster = super._writing();
        const customPhaseSteps = {
            writeAdditionalFile() {
                writeFiles.call(this);
            }
        };
        return { ...phaseFromJHipster, ...customPhaseSteps };
        <% } else { %>
        // Here we are not overriding this phase and hence its being handled by JHipster
        return super._writing();
        <% } %>
    }

    get postWriting() {
      // Here we are not overriding this phase and hence its being handled by JHipster
      return super._postWriting();
    }

    get install() {
        // Here we are not overriding this phase and hence its being handled by JHipster
        return super._install();
    }

    get end() {
        // Here we are not overriding this phase and hence its being handled by JHipster
        return super._end();
    }
};
