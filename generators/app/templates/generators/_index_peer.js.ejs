/* eslint-disable consistent-return */
const chalk = require('chalk');
<% if(subGenerator === 'client') {%> const writeFiles = require('./files').writeFiles; <% } %>

function createGenerator(env) {
    return class extends env.requireGenerator('jhipster:<%= subGenerator %>') {
        constructor(args, opts) {
            super(args, { fromBlueprint: true, ...opts }); // fromBlueprint variable is important

            <% if (subGenerator.startsWith('entity-')) { %>
            if (!this.jhipsterContext) {
                this.error(`This is a JHipster blueprint and should be used only like ${chalk.yellow('jhipster --blueprint <%= moduleName %>')}`);
            }
            <% } else { %>
            const jhContext = (this.jhipsterContext = this.options.jhipsterContext);

            if (!jhContext) {
                this.error(
                    `This is a JHipster blueprint and should be used only like ${chalk.yellow('jhipster --blueprint <%= moduleName %>')}`
                );
            }

            this.configOptions = jhContext.configOptions || {};
            <% } %>

            <% if(subGenerator === 'server') { %>
            // This sets up options for this sub generator and is being reused from JHipster
            jhContext.setupServerOptions(this, jhContext);
            <% } else if(subGenerator === 'client') { %>
            // This sets up options for this sub generator and is being reused from JHipster
            jhContext.setupClientOptions(this, jhContext);
            <% } else if (subGenerator === 'entity') { %>
            // This sets up options for this sub generator and is being reused from JHipster
            jhContext.setupEntityOptions(this, jhContext, this);
            <% } else if (subGenerator === 'common') {%>
            // This sets up options for this sub generator and is being reused from JHipster
            jhContext.setupServerOptions(this, jhContext);
            jhContext.setupClientOptions(this, jhContext);
            <% } %>
        }

        get initializing() {
            /**
             * Any method beginning with _ can be reused from the superclass `<%= generators[subGenerator].name %>`
             *
             * There are multiple ways to customize a phase from JHipster.
             *
             * 1. Let JHipster handle a phase, blueprint doesnt override anything.
             * ```
             *      return super._initializing();
             * ```
             *
             * 2. Override the entire phase, this is when the blueprint takes control of a phase
             * ```
             *      return {
             *          myCustomInitPhaseStep() {
             *              // Do all your stuff here
             *          },
             *          myAnotherCustomInitPhaseStep(){
             *              // Do all your stuff here
             *          }
             *      };
             * ```
             *
             * 3. Partially override a phase, this is when the blueprint gets the phase from JHipster and customizes it.
             * ```
             *      const phaseFromJHipster = super._initializing();
             *      const myCustomPhaseSteps = {
             *          displayLogo() {
             *              // override the displayLogo method from the _initializing phase of JHipster
             *          },
             *          myCustomInitPhaseStep() {
             *              // Do all your stuff here
             *          },
             *      }
             *      return Object.assign(phaseFromJHipster, myCustomPhaseSteps);
             * ```
             */
            // Here we are not overriding this phase and hence its being handled by JHipster
            return super._initializing();
        }

        get prompting() {
            <% if(subGenerator === 'client') {%>
            // The prompting phase is being overriden so that we can ask our own questions
            // return {
            //     askForClient: prompts.askForClient,
            //     askForClientSideOpts: prompts.askForClientSideOpts,

            //     setSharedConfigOptions() {
            //         this.configOptions.lastQuestion = this.currentQuestion;
            //         this.configOptions.totalQuestions = this.totalQuestions;
            //         this.configOptions.clientFramework = this.clientFramework;
            //         this.configOptions.useSass = this.useSass;
            //     }
            // };
            // If the prompts need to be overriden then use the code commented out above instead
            <% } %>
            // Here we are not overriding this phase and hence its being handled by JHipster
            return super._prompting();
        }

        get configuring() {
            // Here we are not overriding this phase and hence its being handled by JHipster
            return super._configuring();
        }

        get default() {
            // Here we are not overriding this phase and hence its being handled by JHipster
            return super._default();
        }

        get writing() {
            <% if (subGenerator === 'client') {%>
            // The writing phase is being overriden so that we can write our own templates as well.
            // If the templates doesnt need to be overrriden then just return `super._writing()` here
            const phaseFromJHipster = super._writing();
            const customPhaseSteps = {
                writeAdditionalFile() {
                    writeFiles.call(this);
                }
            };
            return Object.assign(phaseFromJHipster, customPhaseSteps);
            <% } else { %>
            // Here we are not overriding this phase and hence its being handled by JHipster
            return super._writing();
            <% } %>
        }

        get install() {
            // Here we are not overriding this phase and hence its being handled by JHipster
            return super._install();
        }

        get end() {
            // Here we are not overriding this phase and hence its being handled by JHipster
            return super._end();
        }
    };
}

module.exports = {
    createGenerator
};