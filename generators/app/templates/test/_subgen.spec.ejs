const path = require('path');
<%_ if (!['common', 'client', 'server'].includes(subGenerator)) { _%>
const fse = require('fs-extra');
<%_ } _%>
const assert = require('yeoman-assert');
const helpers = require('yeoman-test');

describe('Subgenerator <%= subGenerator %> of <%= moduleName %> JHipster blueprint', () => {
    describe<% if (subGenerator === 'heroku') { %>.skip<% } %>('Sample test', () => {
        before(async function() {
            this.timeout(100000);
<%_ if (subGenerator === 'page') { _%>
            const result = await helpers
                .create('jhipster:client')
                .inTmpDir((dir) => {
                    fse.copySync(path.join(__dirname, '../test/templates/<% if (subGenerator === 'page') { %>vue<% } else { %>ngx<% } %>-blueprint'), dir);
                })
                .withOptions({
                    fromCli: true, skipInstall: true, blueprint: '<%= moduleName %>', skipChecks: true
                })
                .withGenerators([
                    [
                        require('generator-jhipster/generators/client'), // eslint-disable-line global-require
                        'jhipster:client',
                        require.resolve('generator-jhipster/generators/client')
                    ],
                    [
                        require('../generators/client'), // eslint-disable-line global-require
                        'jhipster-<%= moduleName %>:client',
                        path.join(__dirname, '../generators/client/index.js')
                    ]
                ])
                .withPrompts({
                    baseName: 'sampleMysql',
                    packageName: 'com.mycompany.myapp',
                    applicationType: 'monolith',
                    databaseType: 'sql',
                    devDatabaseType: 'h2Disk',
                    prodDatabaseType: 'mysql',
                    cacheProvider: 'ehcache',
                    authenticationType: 'session',
                    enableTranslation: true,
                    nativeLanguage: 'en',
                    languages: ['fr', 'de'],
                    buildTool: 'maven',
                    rememberMeKey: '2bb60a80889aa6e6767e9ccd8714982681152aa5'
                })
                .run();

            return result
<%_ } else { _%>
            return helpers
<%_ } _%>
                .create('jhipster:<% if (subGenerator.startsWith('entity')) { %>entity<% } else { %><%= subGenerator %><% } %>')
<%_ if (!['common', 'client', 'server', 'page'].includes(subGenerator)) { _%>
                .inTmpDir((dir) => {
                    fse.copySync(path.join(__dirname, '../test/templates/ngx-blueprint'), dir);
                })
<%_ } _%>
                .withOptions({
                    fromCli: true, skipInstall: true, blueprint: '<%= moduleName %>', skipChecks: true
                })
                .withGenerators([
<%_ if (subGenerator.startsWith('entity')) { _%>
                    [
                        require('generator-jhipster/generators/entity'), // eslint-disable-line global-require
                        'jhipster:entity',
                        require.resolve('generator-jhipster/generators/entity')
                    ],
<%_ } _%>
                    [
                        require('generator-jhipster/generators/<%= subGenerator %>'), // eslint-disable-line global-require
                        'jhipster:<%= subGenerator %>',
                        require.resolve('generator-jhipster/generators/<%= subGenerator %>')
                    ],
                    [
                        require('../generators/<%= subGenerator %>'), // eslint-disable-line global-require
                        'jhipster-<%= moduleName %>:<%= subGenerator %>',
                        path.join(__dirname, '../generators/<%= subGenerator %>/index.js')
                    ]
                ])
<%_ if (subGenerator.startsWith('entity') || subGenerator.startsWith('spring')) { _%>
                .withArguments(['foo'])
<%_ } _%>
                .withPrompts({
<%_ if (subGenerator.startsWith('entity')) { _%>
                    fieldAdd: false,
                    relationshipAdd: false,
                    dto: 'no',
                    service: 'no',
                    pagination: 'infinite-scroll'
<%_ } else if (subGenerator === 'spring-service') { _%>
                    useInterface: false
<%_ } else if (subGenerator === 'spring-controller') { _%>
                    actionAdd: false
<%_ } else { _%>
                    baseName: 'sampleMysql',
                    packageName: 'com.mycompany.myapp',
                    applicationType: 'monolith',
                    databaseType: 'sql',
                    devDatabaseType: 'h2Disk',
                    prodDatabaseType: 'mysql',
                    cacheProvider: 'ehcache',
                    authenticationType: 'session',
                    enableTranslation: true,
                    nativeLanguage: 'en',
                    languages: ['fr', 'de'],
                    buildTool: 'maven',
                    rememberMeKey: '2bb60a80889aa6e6767e9ccd8714982681152aa5'
<%_ } _%>
                })
                .run();
        });

        it('it works', () => {
            // Adds your tests here
            assert.textEqual('Write your own tests!', 'Write your own tests!');
        });
    });
});
